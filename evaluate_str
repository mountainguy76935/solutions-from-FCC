var calc = function (expression) {
  let initRegEx = /(-)*\d+\.*\d*/gi;
  if (expression.match(initRegEx).length === 1) {
    return parseInt(expression)
  }
  let regEx = /\s+/gi;
  let firstRegEx = /(-)*\d+\.*\d*(\/|\*)(-)*\d+\.*\d*/;
  let secondRegEx = /(-)*\d+\.*\d*(\+|-)(-)*\d+\.*\d*/;
  let parenRegEx = /\([^)]*\)|\[[^\]]*\]/gi;
  let target = ''
  expression = expression.replace(regEx, '');
  function evaluate(str) { 
    function parseOp(operator) {
      let negCounter = 0;
      ind = str.indexOf(operator)
      num2 = str.match(str.slice(ind+1))[0];
      if (num2.includes('-')) {
        for (let j = 0; j<num2.length; j++) {
          if (num2[j] === '-') {
            negCounter++
          }
        }
        num2 = num2.replace(/-/gi, '');
        num2 = negCounter % 2 !== 0 ? '-'+num2 : num2
      }
      num2 = parseFloat(num2)
    }
    let num1 = parseFloat(str.match(initRegEx)[0])
    let num2
    let ind;
    for (let i = 0; i<str.length; i++) {
      if (i === 0 && str[i] === '-') {
        continue;
      }
      switch(str[i]){
        case '+':
          parseOp('+')
          str = num1+num2
          break;
        case '-':
          parseOp('-')
          str = num1-num2
          break;
        case '*':
          parseOp('*')
          str = num1*num2
          break;
        case '/':
          parseOp('/')
          str = num1/num2
          break;
      }
    }
    return str
  }
  while(expression.indexOf('(') >= 0){
    target = expression.slice(expression.indexOf('(')+1, expression.indexOf(')'))
    expression = expression.replace(parenRegEx, evaluate(target))
  }
  while(expression.includes('*') || expression.includes('/')){
    target = expression.match(firstRegEx)[0];
    expression = expression.replace(target, evaluate(target))
  }
  while((expression.includes('-') || expression.includes('+')) && expression.match(initRegEx).length !== 1){
    target = expression.match(secondRegEx)[0];
    expression = expression.replace(target, evaluate(target))
  }
  return parseFloat(expression)
};
