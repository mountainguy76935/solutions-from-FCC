class Node {
  constructor(val) {
    this.left = null;
    this.right = null;
    this.value = val;
  }
};

class BST {
    constructor() {
      this.root = null;
    }
    add(val){
      let newNode = new Node(val);
      if (!this.root) {
        this.root = newNode;
        return;
      }
      let check = this.root;
      while(true) {
      if (newNode.value < check.value) {
        if (!check.left) {
          check.left = newNode;
          return;
        } else {
          check=check.left
        }
      } else if (newNode.value > check.value) {
        if (!check.right) {
          check.right = newNode
          return;
        } else {
          check=check.right
        }
      }
    }
  }
  breadthFirstSearch(queue, value){
      let currentNode;
      if (!queue && !value) {
        currentNode = this.root;
        queue = [currentNode];
        value=[];
      }
      if (!queue[0]) {
        return value
      }
      currentNode = queue.shift(); 
      value.push(currentNode.value);
      if (currentNode.left) {
        queue.push(currentNode.left);
      }
      if (currentNode.right) {
        queue.push(currentNode.right);
      }
      return this.breadthFirstSearch(queue, value)
    }
    DFSInOrder() {
      function inOrder(node, list) {
        console.log(node.value)
        if (node.left) {
          inOrder(node.left, list)
        }
        list.push(node.value);
        if (node.right) {
          inOrder(node.right, list)
        }
        return list
      }
      return inOrder(this.root, []);
  }
}

let newestNode = new BST();
newestNode.add(9);
newestNode.add(10);
newestNode.add(11);


console.log(newestNode)
